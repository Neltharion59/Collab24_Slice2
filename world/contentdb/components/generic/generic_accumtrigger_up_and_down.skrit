//////////////////////////////////////////////////////////////////////////////
//
// File     :  generic_accumtrigger_up_and_down.skrit
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// public definitions

// reserved tags
property bool			_server_only$			= false;
property string			_doc$					= "Accumulate trigger - Rise up, then trigger when zero";

// exported properties
property eWorldEvent	message_increment$		= WE_REQ_ACTIVATE	doc = "Message to increment counter";
property eWorldEvent	message_decrement$		= WE_REQ_DEACTIVATE doc = "Message to decrement counter";

property scid      		send_to_scid$								doc = "Scid of object to receive message when dropped back to zero";

property float			num_delay$				= 0.0				doc = "Delay (in seconds) before sending message";
owner = GoSkritComponent;

// globals
int						current_num_messages$	= 0;
bool					was_ever_incremented$			= false;

//////////////////////////////////////////////////////////////////////////////

trigger OnGoDrawDebugHud$
{
	Goid goid$ = send_to_scid$.Goid;
	if( goid$.IsValid )
	{
		World.DrawDebugDirectedLine( owner.go.Placement.Position,
									 goid$.go.Placement.Position,
									 MakeColor( 0, 1.0, 0, 0.5 ),
									 ToString( WE_REQ_ACTIVATE ) );
	}
}

EvaluateMessageCount$
{
	// See if the message count is equal to or greater than our count
	if( was_ever_incremented$ && current_num_messages$ == 0 )
	{
        PostWorldMessage( WE_REQ_ACTIVATE, owner.Goid, send_to_scid$, num_delay$ );
	}
}

event OnGoHandleMessage$( eWorldEvent e$, WorldMessage )
{
	if( e$ == message_increment$ )
	{
		// Increment counter
		current_num_messages$	+= 1;
        was_ever_incremented$ = true;

		// Evaluate
		EvaluateMessageCount$();
	}

	if( e$ == message_decrement$ )
	{
		// Increment counter
		current_num_messages$	-= 1;

		// Evaluate
		EvaluateMessageCount$();
	}
}
